----- Welcome To Python Language Notes ------ 

1: Complex:  Compile code at once (c,c++,java)
2: Interpreter: Line by line code (Python, JavaScript)

3: Low Level: Directly interact with hardware, fast , difficult to understand
4: High Level: No interact with hardware, slow but easy to read nad write.

5: Python: 
    .Easy to Learnn
    .Interpreter Language
    .Cross Platform
    .Huge Library Support
    .OOP , functional 
    .Scalable and Fast 

6: Operators: +,-,*,%,/ 
    .arith - math calculations
    .comparison - compare values
    .logical-  combine
    .assignment- assign values
    .identity - object memory location
    . memebership - value exist in sequence

7:List and Tuples:
    List: Store group of elements in single     variable. Which we can edit as well. Mutable. [],(()), slicing usded for changing more elements in a variable list.
        .Copy()
        .alisa()
        .in, not in (memebership)
        .update,repeat

        Methods:
            ..Append: used for add elements in list append()
            ..Extend: join two variables elements extend()
            ..Insert: Add element in where ever you want insert()
            ..Remove: Remove any element (no index) remove()
            ..pop: remove element using index pop()
            ..Clear: Clear all elements in variable or list clear()
            ..Index: know any element index can find index()
            ..Count: count any element in list count()
            ..Sort: small to large sort()
            ..Reverse: last to start reverse()
        
        Finding:
            ..min: find minimum element in list min()
            ..max: find maxmium element in list max()
            ..Common: set a and set b then intersection like (s1.intersection(s2))
        
        Range: start,stop,step 1,100,2 (2 is gap)

        Compresion List: 
            large loops in one line like [expression for item in iterable] [i ** 2 for i in range(1,11)] also add if condition's

    Tuples: 
        Store group of elements in single variable but not editable inmutable. () only access tuples like len(), min max(), count(), index(), sorted().

8: Dictonary:
    1..Store data in pairs (like rollno.), denoted by {}
    key-value
    2...1 pair -> key:value
    3.. Ordered
    4.. Mutable
    5.. Dynamic

        Methods:
            ...Get: get value from Dictonary if not avilable then default value (age = project.get('age', 'not found'))
            ...Keys: If we want to get just keys like in dictonanry we have name and its value age and its value then by keys method we get name and age
            ...value: just like keys it will return all values
            ...items: all values and key will provide by it.
            ...pot: just remove any item. also deafult masg
            ...pop Item: remove last item.
            ...clear: Delete all items or elements.\

        Dictonary Comprehension: loops in one line for small code length.

        Nested Dictonary: Dictonary wih in another dictonanry

9: Function's:
    ..Reusablility
    ..Modularity
    ..Scoping

    ....function naming 
    ....length of function
    ....avoid global variables

        -Parameters and argumnets: placeholder for the values , argumnets are actula values
        e.g def great(name): # name - Parameters
                print('Hi, name)
            great("Hasnain) #Hasnain - arguments
        
        -arguments:
            ..positional argument: your arguments or Parameters position must be correct
            ..Key words argument: assign value with Parameters like greet(name = "hasnin)
            ..default argument: asing value at Parameters position for default value 
        
        - return: store calling function into a variable for result coming form the main function

    ..Decorator's: Add function into a function without chnaging the original function code, like if i order burger then ask for cheese on it now cheese is the new feature but burger as it same. 
    Usecase: @function_name

    ..Generator: using yield keyword to access only one memory or variable or value

        Difference decorator and generator:
            --Decorator used to modifiy, enhance function without changing actual code of the function e.g(simple_Mobile , wrap_mobile)
            --Generator: generate sequence over a time
            operate once on one value
    
    ..Lembda (lmd): anonymous function, send only one expression (keep it simple, use for basic functionality)
    syntax: lambda argument:expression conditon

10:Object Oriented Programming:
    -Problem's: 
        -Code duplication
        -Code maintainence
        -Data security issues
        -Poore code reusebility
        -No reeal world representation
    
    ---It group data and behaviour into objects

    --OOP Concepts:
        1- Classes & Objects
        2- Inheritace
        3- Encapsulation
        4- Abstraction
        5- Polymorphism
    
        1: Classes and Objects: 
            """
                a class is a blueprint or template for creating objetcs.

                map - class
                house - object

                -class is just blueprint or handdraw may be any thing like house car anything
                -on the other hand objects are the actual data or actual thing like house car when it will ready in real.

                -----------------------------
                Self - Its reffer to the specific calling method. Object
                    1. Always use self to store properties inside an object
                    2. Without self no varibles will store in object
            """
            """
                Constructor:
                    1 - Deafult Constructor (self)
                    2 - Parameterized Constructor (Self, name, age)
                    3 - Constructor with deafult values (slef, name="hasnain")
            """
        
        2: Polymorphism: 
                In the context of object-oriented programming, polymorphism means "many forms" and allows objects of different classes to be treated as objects of a common type, enabling them to respond to the same method call in different ways

                one thing which work in different environment